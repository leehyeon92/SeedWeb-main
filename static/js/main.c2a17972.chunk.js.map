{"version":3,"sources":["components/TextInput/IconTextInput.js","assets/icon/pencil.svg","screens/Main/MainPresenter.js","screens/Main/MainContainer.js","screens/Mypage/MypageContainer.js","screens/GoogleMap/pin.png","screens/GoogleMap/GoogleMapPresenter.js","screens/Renderer/RendererPresenter.js","screens/Renderer/RendererContainer.js","App.js","index.js"],"names":["styled","div","input","img","Paper","theme","backgroundColor","palette","mode","typography","body2","padding","spacing","textAlign","color","text","secondary","MainPresenter","WalletConnectConnector","rpc","network","qrcode","pollingInterval","MypageContainer","showRoom","new_ShowRoom","_name","_position","_dateStart","_dateEnd","_imgWeightSize","room","name","position","dateStart","dateEnd","imgWeightSize","coming","currerent","end","none","lat","lng","pick","console","log","curShowRoom","SimpleDialog","props","onClose","open","useNavigate","propTypes","PropTypes","func","isRequired","bool","window","innerWidth","innerHeight","RendererContainer","createTheme","JE_Position","YO_Position","GA_Position","App","useState","user_Active","user_Account","user_NFT","user_NFTArray","user_NFTNickName","user_NFTComing","user_NFTNow","user_NFTEnd","user_ShowRoomEndArr","user","setUser","addEndArr","push","ThemeProvider","basename","process","path","element","replace","to","MainScreen","MypageScreen","RendererScreen","AddShowRoom","addComingArr","addNowArr","ReactDOM","render","getLibrary","provider","library","Web3Provider","document","getElementById"],"mappings":"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","file":"static/js/main.c2a17972.chunk.js","sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\n\nconst TextInputWrapper = styled.div`\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n    justify-content : space-between;\n    flex: 1;\n    padding: 10px;\n    margin: 20px auto 0; \n    width: 200px;\n    border: 1px solid #999;\n    border-radius : 8px;\n`;\n\nconst Input = styled.input`\n    flex: 1;\n    border: 0;\n`;\n\nconst Icon = styled.img`\n    width: 20px;\n    height: 20px;\n`;\n\nfunction IconTextInput({ placeholder, icon, onChange }){\n    return (\n        <TextInputWrapper>\n            <Input placeholder={placeholder} onChange={onChange}/>\n            <Icon src={icon} alt=\"icon\"/>\n        </TextInputWrapper>\n    );\n}\n\nexport default IconTextInput;","export default __webpack_public_path__ + \"static/media/pencil.7ada824a.svg\";","import React from 'react';\nimport { styled } from '@mui/material/styles';\nimport Grid from '@mui/material/Grid';\nimport Paper from '@mui/material/Paper';\nimport Box from '@mui/material/Box';\nimport List from '@mui/material/List';\nimport ListItem from '@mui/material/ListItem';\nimport ListItemText from '@mui/material/ListItemText';\nimport ListItemAvatar from '@mui/material/ListItemAvatar';\nimport Avatar from '@mui/material/Avatar';\nimport ToggleOffTwoToneIcon from '@mui/icons-material/ToggleOffTwoTone';\nimport ToggleOnTwoToneIcon from '@mui/icons-material/ToggleOnTwoTone';\nimport IconButton from '@mui/material/IconButton';\nimport { deepOrange } from '@mui/material/colors';\nimport AppBar from '@mui/material/AppBar';\nimport Toolbar from '@mui/material/Toolbar';\nimport Typography from '@mui/material/Typography';\nimport LoadingButton from '@mui/lab/LoadingButton';\nimport YardOutlinedIcon from '@mui/icons-material/YardOutlined';\nimport Privacy from '../Renderer/Privacy';\n\nconst Item = styled(Paper)(({ theme }) => ({\n    backgroundColor: theme.palette.mode === 'dark' ? '#1A2027' : '#fff',\n    ...theme.typography.body2,\n    padding: theme.spacing(1),\n    textAlign: 'center',\n    color: theme.palette.text.secondary,\n}));\n\nfunction MainPresenter(props) {\n\n    const [loading, setLoading] = React.useState();\n    const [loading_Test, setLoading_Test] = React.useState();\n    function Loading() {\n        setLoading(true);\n    }\n    function Loading_Test() {\n        setLoading_Test(true);\n    }\n\n    return (\n\n\n        <Box\n\n            sx={{\n                width: '100%',\n                marginBottom: '6%'\n\n            }}>\n            <Grid container\n                direction=\"column\"\n                alignItems=\"center\"\n                justifyContent=\"center\"\n            >\n                <AppBar position=\"static\"  >\n                    <Toolbar variant=\"dense\">\n\n                        <YardOutlinedIcon fontSize=\"large\" />\n                        <Typography variant=\"h6\" align='center' sx={{ flexGrow: 1 }} >\n                            WALLET CONNECT\n\n\n                        </Typography>\n                        {/* <IconButton\n\n                            edge=\"end\"\n                            color=\"inherit\"\n\n                        >\n                            <AccountCircleIcon fontSize=\"large\" />\n                        </IconButton> */}\n                        <Privacy {...props}/>\n\n                    </Toolbar>\n                </AppBar>\n\n\n                <Grid marginTop={'3%'}>\n                    <img src={process.env.PUBLIC_URL + \"/img/wallet.png\"} width=\"300\" margin=\"30\" ></img>\n\n                </Grid>\n\n                <Grid item  width='70vw' marginTop={'3%'} marginBottom={'6%'} boxShadow={8}>\n\n                    <Item >\n                        <List>\n\n                            <ListItem >\n                                <ListItemAvatar  >\n                                    <Avatar sx={{ bgcolor: deepOrange[100], width: 48, height: 48 \n                                    ,marginLeft:'-12%'\n                                    }}>\n\n\n                                        {props.active ? <IconButton onClick={props.disconnect}><ToggleOnTwoToneIcon color=\"primary\" fontSize='large' /></IconButton> : <IconButton disabled={(props.active_Test)} onClick={props.connectWalletConnect}><ToggleOffTwoToneIcon color=\"error\" fontSize='large' /></IconButton>}\n\n                                    </Avatar>\n\n                                </ListItemAvatar >\n                                <ListItemText   primary=\"ACTIVE / ACCOUNT\" secondary=\n                                    {props.active ? \"Connect / \" + props.account.substr(0, 6) + \"...\" : \"Not Connect\"}\n                                />\n                            </ListItem>\n\n                            <Box\n                                display=\"grid\"\n                                alignItems=\"center\"\n                                justifyContent=\"center\"\n                                margin=\"4%\"\n                            >\n                                {/* <Button variant=\"contained\" \n                                disabled={!props.active}\n                                 onClick={() => { props.walletSearch(); Loading(); }} loading={loading}\n                                >WALLET SEARCH</Button> */}\n\n                                <LoadingButton variant=\"contained\" sx={{width:'50vw' ,height:'100%', fontSize:'18px'}}\n                                disabled={!props.active}\n                                onClick={() => { props.walletSearch(); Loading(); }} loading={loading}\n                                >WALLET SEARCH</LoadingButton>\n\n                            </Box>\n                        </List>\n                    </Item>\n                </Grid>\n                <Grid item  width='70vw'  boxShadow={8}>\n                    <Item >\n                        <List>\n                            <ListItem >\n                                <ListItemAvatar >\n                                    <Avatar sx={{ bgcolor: deepOrange[100], width: 48, height: 48\n                                                                        ,marginLeft:'-12%' }}>\n                                        {props.active_Test ? <IconButton onClick={props.disconnect_Test}><ToggleOnTwoToneIcon color=\"primary\" fontSize='large' /></IconButton> : <IconButton disabled={(props.active)} onClick={props.connectWalletConnect_Test}><ToggleOffTwoToneIcon color=\"error\" fontSize='large' /></IconButton>}\n                                    </Avatar>\n                                </ListItemAvatar >\n                                <ListItemText primary=\"TEST CONNECT\" secondary=\n                                    {props.active_Test ? \"Connect / \" + props.account_Test.substr(0, 6) + \"...\" : \"Not Connect\"}\n                                />\n                            </ListItem>\n                            <Box\n                                display=\"grid\"\n                                alignItems=\"center\"\n                                justifyContent=\"center\"\n                                margin=\"4%\"\n                            >\n                                <LoadingButton variant=\"contained\"   sx={{width:'50vw' ,height:'100%', fontSize:'18px'}}\n                                disabled={!props.active_Test}\n                                onClick={() => { props.walletSearch_Test(); Loading_Test(); }} loading={loading_Test}\n                                >WALLET SEARCH</LoadingButton>\n\n                            </Box>\n                        </List>\n                    </Item>\n                </Grid>\n            </Grid>\n        </Box >\n\n    );\n}\n\nexport default MainPresenter;\n","import React, { useCallback, useEffect, useState } from 'react';\nimport MainPresenter from './MainPresenter';\nimport { useWeb3React } from \"@web3-react/core\";\nimport { WalletConnectConnector } from \"@web3-react/walletconnect-connector\";\nimport { Alchemy, Network } from \"alchemy-sdk\";\nimport { useNavigate } from 'react-router-dom';\n\nlet api = \"0caFBF128JudQbQ1Km-zn82t_L7C1Qvw\"\nlet findStr = \"monday ape\"\nlet arr = []\n\nconst walletconnect = new WalletConnectConnector({\n    rpc: {\n        1: \"https://mainnet.infura.io/v3/00ca1859789d4b40bce01f4104844224\",\n        56: \"https://bsc-dataseed.binance.org/\"\n    },\n    network: \"binance\",\n    qrcode: true,\n    pollingInterval: 12000\n});\n\nfunction MainContainer({ user, setUser }) {\n    localStorage.removeItem('item')\n\n\n    const {\n        active,\n        account,\n        activate,\n        deactivate\n    } = useWeb3React();\n\n    const navigate = useNavigate();\n\n    const [active_Test, setActive_Test] = useState();\n    const [account_Test, setAccount_Test] = useState();\n\n    const props = {\n        active,\n        account,\n        active_Test,\n        account_Test,\n        user,\n\n\n        onChangeName: (e) => {\n            console.log(e.target.value)\n            setName(e.target.value);\n        },\n        connectWalletConnect: async () => {\n            try {\n                await activate(walletconnect);\n            } catch (ex) {\n                console.log(ex);\n            }\n\n        },\n\n        walletSearch: async () => {\n            if (!active) {\n                alert(\"Not Connect\")\n                return;\n            }\n\n            const config = {\n                apiKey: api,\n                network: Network.ETH_MAINNET,\n            };\n\n            const alchemy = new Alchemy(config);\n\n            const getMyNFTs = async (result, pageKey) => {\n                result = result ?? []\n\n                const data = await alchemy.nft.getNftsForOwner(account, {\n                    pageKey,\n                    withMetadata: false\n                })\n                result = result.concat(data.ownedNfts)\n\n                let nftList = data[\"ownedNfts\"]\n\n                let i = 1\n\n                for (let nft of nftList) {\n                    i++;\n                    if (`${nft.title}`.indexOf(findStr) != -1) {\n                        arr.push(nft);\n                    }\n                }\n\n                if (data.pageKey) {\n                    result = await getMyNFTs(result, data.pageKey)\n                }\n\n                return result\n            }\n\n            arr = [];\n            await getMyNFTs()\n            setUser((prevState) => {\n                return {\n                    ...prevState,\n                    user_Active: active,\n                    user_Account: account,\n                    user_NFTArray: arr,\n                }\n            });\n\n            navigate(`/mypage`);\n        },\n\n        disconnect: async () => {\n            try {\n                deactivate();\n\n                setActive(false)\n                setAccount(null)\n                setUser((prevState) => {\n                    return {\n                        ...prevState,\n                        user_Active: null,\n                        user_Account: null,\n                        user_NFTArray: null,\n                    }\n                });\n            } catch (ex) {\n                console.log(ex);\n            }\n        },\n\n\n        connectWalletConnect_Test: async () => {\n            setActive_Test(true)\n            setAccount_Test(\"0xdE9B4206B1499e56E4417f8EdB7bE4586FeD30Ba\")\n            setUser((prevState) => {\n                return {\n                    ...prevState,\n                    user_Active: true,\n                    user_Account: \"0xdE9B4206B1499e56E4417f8EdB7bE4586FeD30Ba\",\n                }\n            });\n\n        },\n\n        walletSearch_Test: async () => {\n            if (!active_Test) {\n                alert(\"Not Connect\")\n                return;\n            }\n\n            const config = {\n                apiKey: api,\n                network: Network.ETH_MAINNET,\n            };\n\n            const alchemy = new Alchemy(config);\n\n            const getMyNFTs = async (result, pageKey) => {\n\n                result = result ?? []\n\n                const data = await alchemy.nft.getNftsForOwner(account_Test, {\n                    pageKey,\n                    withMetadata: false\n                })\n                result = result.concat(data.ownedNfts)\n\n                let nftList = data[\"ownedNfts\"]\n\n                let i = 1\n\n                for (let nft of nftList) {\n                    i++;\n                    if (`${nft.title}`.indexOf(findStr) != -1) {\n                        arr.push(nft);\n                    }\n                }\n\n                if (data.pageKey) {\n                    result = await getMyNFTs(result, data.pageKey)\n                }\n\n                return result\n            }\n\n            arr = [];\n            await getMyNFTs()\n            setUser((prevState) => {\n                return {\n                    ...prevState,\n                    user_Active: active_Test,\n                    user_Account: account_Test,\n                    user_NFTArray: arr,\n                }\n            });\n\n            navigate(`/mypage`);\n        },\n\n        disconnect_Test: async () => {\n            setActive_Test(false)\n            setAccount_Test(null)\n            setUser((prevState) => {\n                return {\n                    ...prevState,\n                    user_Active: null,\n                    user_Account: null,\n                    user_NFTArray: null,\n                }\n            });\n        },\n    }\n    return (\n        <>\n            <MainPresenter {...props} />\n        </>\n    );\n}\n\nexport default MainContainer;","import React, { useState } from 'react';\nimport MypagePresenter from './MypagePresenter';\nimport styled from 'styled-components';\nimport { useNavigate } from 'react-router-dom';\n\n/**\n * 마이페이지 데이터 처리, 기능 관련 코드 작성\n */\n\n\nfunction MypageContainer({ user, setUser}) {\n\n   // walletAddress = localStorage.getItem('L_address')\n   // NFTArray = JSON.parse(localStorage.getItem('L_arr'))\n\n   if(localStorage.getItem('item'))\n   {\n    let getitem = JSON.parse(localStorage.getItem('item'))\n    user = getitem.value\n   }\n\n                \n\n    const navigate = useNavigate();\n\n    const props = {\n        user,\n        setUser,\n        onClickTitleButton: (nft) => {\n            const newnft = nft\n\n          //  localStorage.setItem('L_nft', nft);\n\n\n\n            setUser((prevState) => {\n                return { ...prevState, user_NFT: nft}\n            });\n\n\n            navigate(`/renderer`);\n\n        },\n    }\n\n    return (\n        <>\n            <MypagePresenter {...props} />\n        </>\n    );\n}\n\nexport default MypageContainer;","export default __webpack_public_path__ + \"static/media/pin.09d8abec.png\";","import React, { useEffect, useState } from 'react';\r\nimport { GoogleMap, useJsApiLoader, Marker } from '@react-google-maps/api';\r\nimport { Button } from '@mui/material';\r\nimport { styled } from '@mui/material/styles';\r\nimport MarkerImg from './pin.png';\r\nimport Grid from '@mui/material/Grid';\r\nimport Paper from '@mui/material/Paper';\r\nimport Box from '@mui/material/Box';\r\nimport Typography from '@mui/material/Typography';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport ArrowForwardOutlinedIcon from '@mui/icons-material/ArrowForwardOutlined';\r\nimport ClickAwayListener from '@mui/material/ClickAwayListener';\r\nimport InputLabel from '@mui/material/InputLabel';\r\nimport Select from '@mui/material/Select';\r\nimport Backdrop from '@mui/material/Backdrop';\r\nimport CircularProgress from '@mui/material/CircularProgress';\r\nimport List from '@mui/material/List';\r\nimport ListItem from '@mui/material/ListItem';\r\nimport ListItemText from '@mui/material/ListItemText';\r\nimport ListSubheader from '@mui/material/ListSubheader';\r\n\r\nimport RemoveCircleOutlineIcon from '@mui/icons-material/RemoveCircleOutline';\r\nimport AddCircleOutlineIcon from '@mui/icons-material/AddCircleOutline';\r\nimport RemoveCircleTwoToneIcon from '@mui/icons-material/RemoveCircleTwoTone';\r\nimport AddCircleTwoToneIcon from '@mui/icons-material/AddCircleTwoTone';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport ButtonGroup from '@mui/material/ButtonGroup';\r\nimport { width } from '@mui/system';\r\n\r\n\r\n\r\nconst JE_Position = {\r\n  lat: 33.396514,\r\n  lng: 126.344930\r\n}\r\n\r\nconst YO_Position = {\r\n  lat: 34.750594,\r\n  lng: 127.745762\r\n}\r\n\r\nconst GA_Position = {\r\n  lat: 37.791855,\r\n  lng: 128.90720,\r\n}\r\n\r\nlet firstShowRoom = false;\r\nlet names = []\r\nlet a = 1;\r\nconst containerStyle = {\r\n\r\n  width: '100vw',\r\n  height: '100vh',\r\n};\r\n\r\n\r\nlet curZoom = 3;\r\nlet showRoomArr = [];\r\nlet showRoomEndArr = [];\r\n\r\nfunction showRoom() {\r\n  let name, position, dateStart, dateEnd, imgWeightSize;\r\n}\r\n//state 0=coming 1=now 2=end\r\nfunction new_ShowRoom(_name, _position, _dateStart, _dateEnd, _imgWeightSize) {\r\n\r\n  let room = new showRoom();\r\n  room.name = _name;\r\n  room.position = _position;\r\n  room.dateStart = _dateStart;\r\n  room.dateEnd = _dateEnd;\r\n  room.imgWeightSize = _imgWeightSize;\r\n  return room;\r\n\r\n}\r\n\r\nconst NONE_Position = {\r\n\r\n  lat: 36.594678,\r\n  lng: 127.985756\r\n\r\n}\r\n\r\n\r\nlet coming, currerent, end\r\n\r\nlet none = new_ShowRoom(\"NONE\", NONE_Position, \"NONE\", \"NONE\", \"200\");\r\n\r\n\r\nfunction addcomingArr(_name, _position, _dateStart, _dateEnd, _imgWeightSize) {\r\n  let room = new_ShowRoom(_name, _position, _dateStart, _dateEnd, _imgWeightSize);\r\n  coming = room;\r\n  firstShowRoom = true;\r\n}\r\nfunction addnowArr(_name, _position, _dateStart, _dateEnd, _imgWeightSize) {\r\n  let room = new_ShowRoom(_name, _position, _dateStart, _dateEnd, _imgWeightSize);\r\n  currerent = room;\r\n  firstShowRoom = true;\r\n}\r\nfunction addEndArr(_name, _position, _dateStart, _dateEnd, _imgWeightSize) {\r\n  let room = new_ShowRoom(_name, _position, _dateStart, _dateEnd, _imgWeightSize);\r\n  end = room;\r\n  showRoomEndArr.push(room)\r\n  firstShowRoom = true;\r\n}\r\nfunction removecomingArr() {\r\n  coming = null;\r\n}\r\nfunction removenowArr() {\r\n  currerent = null;\r\n}\r\n\r\nfunction removeEndArr() {\r\n  end = null;\r\n}\r\n\r\n\r\n\r\n\r\n\r\n// addcomingArr('ARTE 1', JE_Position, \"2022.11.20\", \"2028.11.20\", 120);\r\n// addnowArr('ARTE 2', YO_Position, \"2022.11.21\", \"2122.11.20\", 140);\r\n// addEndArr('ARTE 3', GA_Position, \"2022.11.21\", \"2122.11.20\", 140);\r\n//removeEndArr();\r\n\r\n\r\n\r\n\r\n\r\nfunction pick() {\r\n\r\n\r\n  if (currerent) {\r\n    console.log(\"1\")\r\n    return currerent;\r\n  }\r\n  else if (end) {\r\n    console.log(\"2\")\r\n    return end;\r\n  }\r\n  else if (coming) {\r\n    console.log(\"3\")\r\n    return coming;\r\n  }\r\n  else { }\r\n  console.log(\"4\")\r\n  return none;\r\n}\r\n\r\n\r\nconsole.log(pick())\r\n\r\n// addShowRoomArr('JE')\r\n// addShowRoomArr('YO')\r\n\r\n// let room = new_ShowRoom(\"JEJU\", JE_Position);\r\n\r\n\r\n\r\n// console.log(room)\r\n\r\n\r\n// ArrShowRoom.unshift(showRoom = new new_ShowRoom('JE', JE_Position));\r\n// ArrShowRoom.unshift(showRoom = new new_ShowRoom('YO', YO_Position));\r\n\r\n//console.log(a)\r\n//JE     lat: 33.396514 lng: 126.344930\r\n//YO     lat: 34.750591 lng: 127.745761\r\n//GA     lat: 37.791870 lng: 128.907162\r\n\r\n\r\n// const position = {\r\n//   lat: 33.396514,\r\n//   lng: 126.344930\r\n// }\r\n\r\n\r\n\r\nfunction GoogleMapPresenter(props) {\r\n  const { isLoaded } = useJsApiLoader({\r\n    id: 'google-map-script',\r\n    googleMapsApiKey: \"AIzaSyDAR5IsWK28BMFmf7TBPcToCG7sQoO81aA\"\r\n  })\r\n\r\n\r\n\r\n\r\n  coming = props.user.user_NFTComing\r\n  currerent = props.user.user_NFTNow\r\n  end = props.user.user_NFTEnd\r\n\r\n\r\n  names = []\r\n  showRoomEndArr = []\r\n  showRoomEndArr = props.user.user_ShowRoomEndArr\r\n\r\n\r\n\r\n\r\n\r\n  // const getitem = JSON.parse(localStorage.getItem('item'))\r\n\r\n  // props.setUser(getitem)\r\n\r\n  // console.log(getitem)\r\n  // console.log(props.user)\r\n\r\n  for (let i = 0; i < showRoomEndArr.length; ++i) {\r\n    let a = showRoomEndArr[i].dateStart + \" ~ \" + showRoomEndArr[i].dateEnd + \" - \" + showRoomEndArr[i].name\r\n    names.unshift(a)\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  if (!coming && !currerent && !end) {\r\n    firstShowRoom = false;\r\n  }\r\n  else {\r\n    firstShowRoom = true;\r\n  }\r\n\r\n  const [map, setMap] = React.useState(null)\r\n\r\n  const onLoad = React.useCallback(function callback(map) {\r\n\r\n    // This is just an example of getting and using the map instance!!! don't just blindly copy!\r\n    loadMap();\r\n    const bounds = new window.google.maps.LatLngBounds(pick() ? pick().position : null);\r\n    map.fitBounds(bounds);\r\n\r\n    setMap(map)\r\n  }, [])\r\n\r\n  const onUnmount = React.useCallback(function callback(map) {\r\n    setMap(map)\r\n  }, [])\r\n\r\n\r\n\r\n\r\n  const onLoad2 = marker => {\r\n    console.log('marker: ', marker)\r\n  }\r\n\r\n\r\n  async function loadMap() {\r\n    bhandleToggle()\r\n\r\n    setTimeout(() => {\r\n      bhandleClose()\r\n    }, 600);\r\n\r\n  }\r\n\r\n  const [zoom, setZoom] = useState()\r\n\r\n\r\n  useEffect(() => {\r\n    setTimeout(() => {\r\n      setZoom(3)\r\n    }, 800);\r\n  }, [])\r\n\r\n\r\n  const MarkerClick = (p) => {\r\n\r\n    loadMap()\r\n    map.setCenter(p);\r\n   // setZoom(3)\r\n   setZoom(curZoom)\r\n\r\n    setTimeout(() => {\r\n      setZoom(15)\r\n    }, 400);\r\n\r\n  }\r\n\r\n\r\n  var myOptions = {\r\n    panControl: false,\r\n    zoomControl: false,\r\n    scaleControl: false,\r\n    streetViewControl: false,\r\n    mapTypeControl: false,\r\n    overviewMapControl: false,\r\n    rotateControl: false,\r\n    disableDefaultUI: true,\r\n    clickableIcons: false,\r\n  }\r\n\r\n  const Item = styled(Paper)(({ theme }) => ({\r\n    backgroundColor: theme.palette.mode === 'dark' ? '#1A2027' : '#fff',\r\n    ...theme.typography.body2,\r\n    padding: theme.spacing(1),\r\n    textAlign: 'center',\r\n    color: theme.palette.text.secondary,\r\n  }));\r\n\r\n  const [open, setOpen] = React.useState(false);\r\n\r\n  const handleClick = () => {\r\n    setOpen((prev) => !prev);\r\n  };\r\n\r\n  const handleClickAway = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  const styles = {\r\n    position: 'fixed',\r\n    top: '30vh',\r\n    right: 0,\r\n    left: 0,\r\n    zIndex: 1,\r\n    border: '1px solid',\r\n    p: 2,\r\n    borderRadius: 2,\r\n    margin: 2,\r\n    bgcolor: 'background.paper',\r\n  };\r\n\r\n\r\n\r\n\r\n\r\n  const [personName, setPersonName] = React.useState([]);\r\n  const handleChangeMultiple = (event) => {\r\n    const { options } = event.target;\r\n    const value = [];\r\n    for (let i = 0, l = options.length; i < l; i += 1) {\r\n      if (options[i].selected) {\r\n        value.push(options[i].value);\r\n      }\r\n    }\r\n    setPersonName(value);\r\n  };\r\n\r\n\r\n  const NONE_Position = {\r\n\r\n    lat: 36.594678,\r\n    lng: 127.985756\r\n\r\n  }\r\n\r\n  const [bopen, setbOpen] = React.useState(false);\r\n  const bhandleClose = () => {\r\n    setbOpen(false);\r\n  };\r\n  const bhandleToggle = () => {\r\n    setbOpen(!open);\r\n  };\r\n\r\n\r\n  function PlusZoom() {\r\n\r\n    let a = curZoom + 1;\r\n    setZoom(a)\r\n  }\r\n  function SuntractZoom() {\r\n    let a = curZoom - 1;\r\n    setZoom(a)\r\n  }\r\n\r\n  function handleZoomChanged() {\r\n    console.log(this.getZoom())\r\n    curZoom = this.getZoom()\r\n  }\r\n\r\n\r\n\r\n  return isLoaded ? (\r\n\r\n\r\n    <>\r\n      <div>\r\n        <Backdrop\r\n          sx={{ color: '#fff', height: '100vh', zIndex: (theme) => theme.zIndex.drawer + 1 }}\r\n          open={bopen}\r\n        // onClick={bhandleClose}\r\n        >\r\n          <CircularProgress color=\"inherit\" >\r\n\r\n          </CircularProgress>\r\n        </Backdrop>\r\n      </div>\r\n\r\n\r\n      <Box\r\n      >\r\n        <Grid\r\n          sx={{ height: '6vh ' }}\r\n        >\r\n          <GoogleMap\r\n            onZoomChanged={handleZoomChanged}\r\n            mapContainerStyle={containerStyle}\r\n\r\n            onLoad={onLoad}\r\n            onUnmount={onUnmount}\r\n            zoom={zoom}\r\n            options={myOptions}\r\n            center={pick().position}\r\n\r\n          >\r\n            {\r\n              !firstShowRoom ?\r\n\r\n                <Marker\r\n                  optimized={false}\r\n                  zIndex={5}\r\n                  label={{ src: { MarkerImg }, text: \"have no plans\", color: '#000', fontSize: \"20px\", fontWeight: \"500\" }}\r\n                  onLoad={onLoad2}\r\n\r\n                  position={currerent ? currerent.position : NONE_Position}\r\n\r\n                  icon={{\r\n                    url: MarkerImg,\r\n\r\n                    anchor: new google.maps.Point(90, 60),\r\n                    scaledSize: new google.maps.Size(180, 180)\r\n                  }}\r\n                />\r\n\r\n\r\n                : null\r\n            }\r\n            {\r\n              currerent ?\r\n                <Marker\r\n\r\n                  optimized={false}\r\n                  zIndex={5}\r\n                  label={{ src: { MarkerImg }, text: currerent ? \"NOW\" : \"cNONE\",\r\n                   color: '#000', fontSize: \"12px\", fontWeight: \"600\" }}\r\n                  onLoad={onLoad2}\r\n\r\n                  position={currerent ? currerent.position : NONE_Position}\r\n                  onClick={() => MarkerClick(currerent.position)}\r\n                  icon={{\r\n                    url: MarkerImg,\r\n\r\n                    anchor: new google.maps.Point(30, 40),\r\n                    scaledSize: new google.maps.Size(60, 120)\r\n                  }}\r\n                /> : null\r\n            }\r\n\r\n\r\n            {\r\n              coming ?\r\n                <Marker\r\n                  optimized={false}\r\n                  zIndex={4}\r\n                  label={{ src: { MarkerImg }, text: coming ? \"COMING\" : \"cNONE\", color: '#000', \r\n                  fontSize: \"12px\", fontWeight: \"600\" }}\r\n                  onLoad={onLoad2}\r\n                  position={coming ? coming.position : NONE_Position}\r\n\r\n                  onClick={() => MarkerClick(coming.position)}\r\n                  icon={{\r\n                    url: MarkerImg,\r\n\r\n                    anchor: new google.maps.Point(40, 40),\r\n                    scaledSize: new google.maps.Size(80, 120)\r\n                  }}\r\n                /> : null\r\n            }\r\n\r\n\r\n            {\r\n              end ?\r\n                <Marker\r\n                  optimized={false}\r\n                  zIndex={5}\r\n                  label={{ src: { MarkerImg }, text: end ? \"ENDED\" : \"eNONE\", color: '#000', fontSize: \"12px\", fontWeight: \"600\" }}\r\n                  onLoad={onLoad2}\r\n                  position={end ? end.position : NONE_Position}\r\n                  onClick={() => MarkerClick(end.position)}\r\n\r\n                  icon={{\r\n                    url: MarkerImg,\r\n\r\n\r\n                    anchor: new google.maps.Point(30, 38),\r\n                    scaledSize: new google.maps.Size(60, 120)\r\n                  }}\r\n                /> : null\r\n            }\r\n\r\n          </GoogleMap>\r\n\r\n        </Grid>\r\n        <>\r\n          <Grid container\r\n            direction=\"row\"\r\n            alignItems=\"center\"\r\n            justifyContent=\"center\"\r\n          >\r\n\r\n\r\n            <Grid >\r\n              <Button variant=\"contained\"\r\n                sx={{padding:'4%'}}\r\n                style={{ marginTop: \"40%\", width: \"90px\", \r\n                display: \"grid\", borderRadius: 8, }}\r\n                onClick={() => coming ? MarkerClick(coming.position) : null} >\r\n                <Typography\r\n                  fontSize=\"10px\">\r\n                  COMING\r\n                </Typography>\r\n                <Typography\r\n                                sx={{marginTop:'-10%'}}\r\n                  fontSize=\"10px\" fontWeight={\"100\"}>\r\n                  {coming ? coming.name : \"NONE\"}\r\n                </Typography>\r\n              </Button>\r\n            </Grid>\r\n\r\n            <Grid item mr={'2vw'} ml={'2vw'} >\r\n\r\n            </Grid>\r\n            \r\n            <Grid item >\r\n              <Button variant=\"contained\"\r\n                              sx={{padding:'4%'}}\r\n                style={{ marginTop: \"40%\", width: \"90px\", \r\n                display: \"grid\", borderRadius: 8, }}\r\n                onClick={() => currerent ? MarkerClick(currerent.position) : null} >\r\n                <Typography\r\n                  fontSize=\"10px\">\r\n                  NOW\r\n                </Typography>\r\n                <Typography\r\n                sx={{marginTop:'-10%'}}\r\n                  fontSize=\"10px\" fontWeight={\"100\"}>\r\n                  {currerent ? currerent.name : \"NONE\"}\r\n                </Typography>\r\n              </Button>\r\n\r\n\r\n            </Grid>\r\n\r\n\r\n\r\n            <Grid item mr={'2vw'} ml={'2vw'} >\r\n             \r\n\r\n            </Grid>\r\n\r\n            <Grid item >\r\n              <Button variant=\"contained\" color=\"primary\"\r\n                              sx={{padding:'4%'}}\r\n                style={{ marginTop: \"40%\", width: \"90px\", \r\n                display: \"grid\", borderRadius: 8, }}\r\n                onClick={() => end ? MarkerClick(end.position) : null} >\r\n                <Typography\r\n                  fontSize=\"10px\">\r\n                  ENDED\r\n                </Typography>\r\n                <Typography\r\n                                sx={{marginTop:'-10%'}}\r\n                  fontSize=\"10px\" fontWeight={\"100\"}>\r\n                  {end ? end.name : \"NONE\"}\r\n                </Typography>\r\n                \r\n              </Button>\r\n            </Grid>\r\n          </Grid>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n          <Grid\r\n            container\r\n            direction=\"row\"\r\n            justifyContent=\"center\"\r\n\r\n          >\r\n\r\n            <ClickAwayListener onClickAway={handleClickAway} >\r\n              <Box marginTop='1vmin'>\r\n                <Button onClick={handleClick} variant=\"contained\" color=\"primary\"\r\n                  style={{\r\n                    width: \"140px\",\r\n      \r\n\r\n\r\n                    borderRadius: 10,\r\n\r\n                    fontSize: \"10px\",\r\n\r\n                  }}\r\n\r\n                >\r\n                  <Typography\r\n                    fontSize=\"12px\">\r\n                    PAST SHOW LIST\r\n                  </Typography>\r\n\r\n                </Button>\r\n\r\n\r\n                  <IconButton\r\n                color=\"primary\" onClick={PlusZoom}        \r\n                sx={{paddingLeft:'40px' }}>\r\n                <AddCircleTwoToneIcon fontSize=\"large\" />\r\n            </IconButton>\r\n\r\n           <IconButton\r\n                color=\"primary\" onClick={SuntractZoom} \r\n                                  sx={{ }}>\r\n                <RemoveCircleTwoToneIcon fontSize=\"large\" />\r\n            </IconButton>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n                {open ? (\r\n\r\n\r\n\r\n                  <Grid item\r\n\r\n                    container\r\n                    direction=\"column\"\r\n                    alignItems=\"center\"\r\n\r\n\r\n                  >\r\n\r\n\r\n배포법r\r\n\r\n                    <List\r\n                      sx={{\r\n                        width: 'center',\r\n                        height: 'center',\r\n                        position: 'fixed',\r\n                        maxHeight: '30%',\r\n                        bgcolor: 'background.paper',\r\n\r\n                        overflow: 'auto',\r\n                        marginTop: '4%',\r\n                        borderRadius: 2,\r\n                        '& ul': { padding: 0 },\r\n                      }}\r\n                      subheader={<li />}\r\n                    >\r\n                      {[0].map((sectionId) => (\r\n                        <li key={`section-${sectionId}`}>\r\n                          <ul>\r\n                            {/* <ListSubheader\r\nsx={{textAlign:'center', fontSize:'20px', fontWeight: '600' ,marginTop: '4%'}}\r\n            >{`ENDED`}</ListSubheader> */}\r\n                            {names.map((item) => (\r\n                              <ListItem key={`${sectionId}-${item}`}\r\n                              >\r\n                                <ListItemText primary={` ${item}`}\r\n                                  primaryTypographyProps={{\r\n                                    fontSize: 11,\r\n                                    fontWeight: '400',\r\n                                    textAlign: 'center',\r\n                                    marginBottom: '-7px'\r\n                                  }}\r\n\r\n                                />\r\n                              </ListItem>\r\n                            ))}\r\n                          </ul>\r\n                        </li>\r\n                      ))}\r\n                    </List>\r\n\r\n\r\n                    {/* <ListItemText primary=\"ACCOUNT\"\r\n                        primaryTypographyProps={{\r\n                            fontSize: 14,\r\n                            fontWeight: '600',\r\n                            mb: '2px',\r\n                            textAlign: 'center',\r\n                            pt: '0px', pb: '0px'\r\n                        }}\r\n                        secondary={props.user.user_Active ? props.user.user_Account.substr(0, 6) + \"...\" : \"Not Connect\"}\r\n                        secondaryTypographyProps={{\r\n                            fontSize: 14,\r\n                            fontWeight: '100',\r\n                            mb: '2px',\r\n                            textAlign: 'center',\r\n                            pt: '0px', pb: '0px'\r\n                        }}\r\n                    /> */}\r\n\r\n\r\n\r\n                  </Grid>\r\n\r\n\r\n                ) : null}\r\n\r\n              </Box>\r\n\r\n            </ClickAwayListener>\r\n\r\n          </Grid>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n        </>\r\n      </Box>\r\n    </>\r\n\r\n  ) : <></>\r\n}\r\n\r\nexport default React.memo(GoogleMapPresenter)","import React from 'react';\nimport styled from 'styled-components';\n\nimport Grid from '@mui/material/Grid';\nimport Paper from '@mui/material/Paper';\nimport Box from '@mui/material/Box';\n\nimport List from '@mui/material/List';\nimport ListItem from '@mui/material/ListItem';\nimport ListItemText from '@mui/material/ListItemText';\nimport ListItemAvatar from '@mui/material/ListItemAvatar';\nimport Avatar from '@mui/material/Avatar';\nimport MenuIcon from '@mui/icons-material/Menu';\nimport ToggleOffTwoToneIcon from '@mui/icons-material/ToggleOffTwoTone';\nimport ToggleOnTwoToneIcon from '@mui/icons-material/ToggleOnTwoTone';\n\nimport IconButton from '@mui/material/IconButton';\n\nimport CloseIcon from '@mui/icons-material/Close';\n\nimport { green, pink, deepOrange } from '@mui/material/colors';\nimport { Button } from '@mui/material';\n\nimport AppBar from '@mui/material/AppBar';\nimport Toolbar from '@mui/material/Toolbar';\nimport Typography from '@mui/material/Typography';\n\nimport AccountCircleIcon from '@mui/icons-material/AccountCircle';\nimport YardOutlinedIcon from '@mui/icons-material/YardOutlined';\n\nimport PropTypes from 'prop-types';\nimport DialogTitle from '@mui/material/DialogTitle';\nimport Dialog from '@mui/material/Dialog';\nimport PersonIcon from '@mui/icons-material/Person';\nimport AddIcon from '@mui/icons-material/Add';\nimport { blue } from '@mui/material/colors';\nimport ArrowBackIcon from '@mui/icons-material/ArrowBack';\nimport { useNavigate } from 'react-router-dom';\nimport MapIcon from '@mui/icons-material/Map';\nimport Popover from '@mui/material/Popover';\n\nimport Privacy from './Privacy';\nimport Menu from './Menu';\n\nimport BasicPopover from './BasicPopover'\n\nimport PopupState, { bindTrigger, bindPopover } from 'material-ui-popup-state';\nimport RoomIcon from '@mui/icons-material/Room';\nimport { Height } from '@material-ui/icons';\n\n\nconst showRoom = {\n    UNDECIDED: \"UNDECIDED\",\n    JEJU: \"JEJU\",\n    YEOSU: \"YEOSU\",\n    GANGNEUNG: \"GANGNEUNG\",\n};\n\nlet curShowRoom = showRoom.GANGNEUNG;\n\nconsole.log(curShowRoom)\n\nfunction SimpleDialog(props) {\n    //\n\n    //\n    const { onClose, open } = props;\n\n    const navigate = useNavigate();\n\n    const handleClose = () => {\n        onClose();\n    };\n\n    const back = () => {\n        navigate(`/mypage`);\n    };\n\n    const showRoom = () => {\n        switch (curShowRoom) {\n            case \"UNDECIDED\":\n                alert(\"미정\")\n                break;\n            case \"JEJU\":\n\n                window.open('https://www.google.com/maps/place/%EC%95%84%EB%A5%B4%EB%96%BC%EB%AE%A4%EC%A7%80%EC%97%84+%EC%A0%9C%EC%A3%BC/data=!3m1!4b1!4m5!3m4!1s0x350c5f6816650b53:0xa96f526f32c1bd52!8m2!3d33.3965031!4d126.3449296', '_blank')\n                break;\n            case \"YEOSU\":\n                window.open('https://www.google.com/maps/place/%EC%95%84%EB%A5%B4%EB%96%BC%EB%AE%A4%EC%A7%80%EC%97%84+%EC%97%AC%EC%88%98/data=!3m1!4b1!4m5!3m4!1s0x356dd92ba33eb947:0xbf08f632e89f697a!8m2!3d34.7505794!4d127.7457573', '_blank')\n                break;\n            case \"GANGNEUNG\":\n                window.open('https://www.google.com/maps/place/%EC%95%84%EB%A5%B4%EB%96%BC%EB%AE%A4%EC%A7%80%EC%97%84+%EA%B0%95%EB%A6%89/data=!3m1!4b1!4m5!3m4!1s0x3561e7629fb74ba1:0xa8da84e4bbc18963!8m2!3d37.7917805!4d128.90719', '_blank')\n                break;\n            default:\n                break;\n        }\n    };\n\n\n    return (\n<>\n</>\n    );\n}\n\nSimpleDialog.propTypes = {\n    onClose: PropTypes.func.isRequired,\n    open: PropTypes.bool.isRequired,\n};\n\n\nfunction openMap() {\n\n}\n\nexport default function SimpleDialogDemo(props) {\n    const [open, setOpen] = React.useState(false);\n\n\n\n    const handleClose = () => {\n        setOpen(false);\n    };\n\n\n\n    return (\n\n        \n        <Box >\n            <Grid   >\n                <AppBar position=\"fixed\"\n\n                sx={{\n\n            }}\n                >\n                    <Toolbar variant=\"dense\" >\n                        <>\n                            <Menu {...props} />\n                        </>\n                        <Typography variant=\"h6\" align='center' \n                        sx={{ flexGrow: 1 }} >\n\n                            {props.user.user_NFTNickName}\n                        </Typography >\n                        <Privacy {...props} />\n                    </Toolbar>\n                </AppBar>\n            </Grid>\n            <Grid position={'fixed'}>\n                <SimpleDialog {...props}\n                    open={open}\n                    onClose={handleClose} />\n            </Grid>\n        </Box>\n\n    );\n}\n","import React, { useState } from 'react';\nimport RendererPresenter from '../Renderer/RendererPresenter';\nimport styled from 'styled-components';\nimport * as THREE from 'three';\nlet camera, scene, renderer;\nlet geometry, material, mesh;\n\nimport Grid from '@mui/material/Grid';\nimport Paper from '@mui/material/Paper';\nimport Box from '@mui/material/Box';\n\nimport List from '@mui/material/List';\nimport ListItem from '@mui/material/ListItem';\nimport ListItemText from '@mui/material/ListItemText';\nimport ListItemAvatar from '@mui/material/ListItemAvatar';\nimport Avatar from '@mui/material/Avatar';\n\nimport ToggleOffTwoToneIcon from '@mui/icons-material/ToggleOffTwoTone';\nimport ToggleOnTwoToneIcon from '@mui/icons-material/ToggleOnTwoTone';\n\nimport IconButton from '@mui/material/IconButton';\n\nimport { green, pink, deepOrange } from '@mui/material/colors';\nimport { Button } from '@mui/material';\n\nimport AppBar from '@mui/material/AppBar';\nimport Toolbar from '@mui/material/Toolbar';\nimport Typography from '@mui/material/Typography';\n\nimport AccountCircleIcon from '@mui/icons-material/AccountCircle';\nimport YardOutlinedIcon from '@mui/icons-material/YardOutlined';\n\nimport { Scene } from 'three';\n\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader'\nimport { OBJLoader } from 'three/examples/jsm/loaders/OBJLoader'\n\nimport Backdrop from '@mui/material/Backdrop';\nimport CircularProgress from '@mui/material/CircularProgress';\n\nlet con = false;\nlet firstInit = false;\nlet NFTc;\nlet userc;\nconst params = {\n    color: '#FFA07A'\n};\n\nconst sceneX = window.innerWidth;\nconst sceneY = window.innerHeight\nlet bb = true;\n\n\nfunction RendererContainer({ user, setUser, AddShowRoom }) {\n\n\n    if( !user.user_NFTNickName)\n    {\n        user.user_NFTNickName =\"Default Name\"\n    }\n\n\n\n\n    if (!firstInit) {\n        init();\n        firstInit = true;\n    }\n\n\n    if (!user.user_NFT) {\n        let getitem = JSON.parse(localStorage.getItem('item2'))\n        user = getitem.value\n    }\n\n    const value = user;\n    localStorage.setItem('item2', JSON.stringify({ value }))\n\n    const [open, setOpen] = React.useState(false);\n    const handleClose = () => {\n      setOpen(false);\n    };\n    const handleToggle = () => {\n      setOpen(true);\n    };\n\n    function init() {\n\n        AddShowRoom();\n        camera = new THREE.PerspectiveCamera(70, window.innerWidth / window.innerHeight, 0.01, 10);\n        camera.position.z = 10;\n\n        scene = new THREE.Scene();\n\n        scene.background = new THREE.Color(params.color);\n        geometry = new THREE.BoxGeometry(1, 1, 1);\n        material = new THREE.MeshNormalMaterial();\n\n        mesh = new THREE.Mesh(geometry, material);\n\n\n        scene.add(mesh);\n\n        renderer = new THREE.WebGLRenderer({ antialias: true });\n        renderer.setSize(window.innerWidth, window.innerHeight);\n\n        renderer.setAnimationLoop(animation);\n        document.body.appendChild(renderer.domElement);\n\n\n       // let link = \"https://vast-wildwood-40697.herokuapp.com/https://dstrict.s3.ap-northeast-2.amazonaws.com/seed/TREX.glb\"\n        let link = process.env.PUBLIC_URL + \"/model/T-Rex.glb\"\n        const manager = new THREE.LoadingManager();\n        manager.onStart = function (url, itemsLoaded, itemsTotal) {\n\n            console.log('Started loading file: ' + url + '.\\nLoaded ' + itemsLoaded + ' of ' + itemsTotal + ' files.');\n\n        };\n\n        manager.onLoad = function () {\n\n            console.log('Loading complete!');\n           // handleClose();\n        };\n\n\n        manager.onProgress = function (url, itemsLoaded, itemsTotal) {\n\n            console.log('Loading file: ' + url + '.\\nLoaded ' + itemsLoaded + ' of ' + itemsTotal + ' files.');\n\n        };\n\n        manager.onError = function (url) {\n\n            console.log('There was an error loading ' + url);\n\n        };\n\n\n        //\n\n\n        const loader = new GLTFLoader(manager);\n\n\n\n        loader.load(link, function (glb) {\n\n            scene.add(glb.scene);\n\n        }, undefined, function (error) {\n\n            console.error(error);\n\n        });\n\n\n\n\n\n\n    }\n\n\n\n    //const sceneX = window.innerWidth;\n   // const sceneY = window.innerHeight\n\n    window.addEventListener('resize', onWindowResize, false);\n\n    function onWindowResize() {\n        setTimeout(() => {\n        camera.aspect = window.innerWidth /window.innerHeight;\n        camera.updateProjectionMatrix();\n        renderer.setSize(window.innerWidth , window.innerHeight);\n    }, 100);\n    //     if(!con)\n    //     {\n\n    //         if(bb)\n    //         {\n\n    //         //    camera.aspect = window.innerWidth /window.innerHeight;\n    //         //    camera.updateProjectionMatrix();\n    //          //   renderer.setSize(window.innerWidth , window.innerHeight);\n\n    //             setTimeout(() => {\n    //                 camera.aspect = window.innerWidth /window.innerHeight;\n    //                 camera.updateProjectionMatrix();\n    //                 renderer.setSize(window.innerWidth , window.innerHeight);\n    //                 con = true\n\n    //                 console.log(\"zzzzzzzzzzzzzzz\")\n    //                 console.log(\"zzzzzzzzzzzzzzz\")\n    //               }, 100);\n    //        }\n    //        bb = false\n\n\n    //    }\n    //     else if (con) {\n\n    //         if(!bb)\n    //         {\n\n    //       //      camera.aspect = window.innerWidth /window.innerHeight;\n    //        //     camera.updateProjectionMatrix();\n    //       //     renderer.setSize(window.innerWidth , window.innerHeight);\n\n    //         setTimeout(() => {\n    //             camera.aspect = window.innerWidth /window.innerHeight;\n    //             camera.updateProjectionMatrix();\n    //             renderer.setSize(window.innerWidth , window.innerHeight);\n    //             con = false\n\n    //             console.log(\"xxxxxxxxxxx\")\n    //             console.log(\"xxxxxxxxxxxx\")\n    //           }, 100);\n    //         }\n    //         bb = true\n    //     }\n\n\n        \n    }\n\n    function animation(time) {\n\n\n\n        mesh.rotation.x = time / 2000;\n        mesh.rotation.y = time / 1000;\n\n        renderer.render(scene, camera);\n\n\n    }\n\n    const props = {\n\n        user,\n        setUser,\n        setNickName: (name) => {\n            setUser((prevState) => {\n                return { ...prevState, user_NFTNickName: name }\n            });\n        },\n        DeleteScene: () => {\n\n\n\n            camera = null\n            scene.background = null\n            scene = null\n            geometry = null\n            material = null\n            mesh = null\n            renderer.setAnimationLoop(null);\n            renderer = null\n\n\n        },\n\n\n    }\n\n\n    return (\n        <>\n\n\n\n            <RendererPresenter {...props} />\n\n        </>\n    );\n}\n\nexport default RendererContainer;","import React, { useState } from \"react\";\nimport { BrowserRouter, Navigate, Route, Routes } from 'react-router-dom';\nimport { ThemeProvider, createTheme } from '@mui/material/styles';\nimport MainScreen from './screens/Main';\nimport MypageScreen from './screens/Mypage';\nimport RendererScreen from './screens/Renderer'\nimport './App.css'\n\nimport AppBar from '@mui/material/AppBar';\nimport Toolbar from '@mui/material/Toolbar';\nimport Typography from '@mui/material/Typography'\n\nconst theme = createTheme({\n  typography: {\n    \"fontFamily\": `\"Raleway\", sans-serif`,\n    \"fontSize\": 14,\n    \"fontWeightLight\": 300,\n    \"fontWeightRegular\": 400,\n    \"fontWeightMedium\": 500\n  },\n});\n\nconst JE_Position = {\n  lat: 33.396514,\n  lng: 126.344930\n}\n\nconst YO_Position = {\n  lat: 34.750594,\n  lng: 127.745762\n}\n\nconst GA_Position = {\n  lat: 37.791855,\n  lng: 128.90720,\n}\n\nfunction App() {\n  let [user, setUser] = useState({\n    user_Active: null,\n    user_Account: null,\n    user_NFT: null,\n    user_NFTArray: null,\n    user_NFTNickName: null,\n    user_NFTComing: null,\n    user_NFTNow: null,\n    user_NFTEnd: null,\n    user_ShowRoomEndArr: [],\n  });\n\n  function showRoom() {\n    let name, position, dateStart, dateEnd, imgWeightSize;\n  }\n\n  function new_ShowRoom(_name, _position, _dateStart, _dateEnd, _imgWeightSize) {\n    let room = new showRoom();\n    room.name = _name;\n    room.position = _position;\n    room.dateStart = _dateStart;\n    room.dateEnd = _dateEnd;\n    room.imgWeightSize = _imgWeightSize;\n    return room;\n  }\n\n  function addComingArr(_name, _position, _dateStart, _dateEnd, _imgWeightSize) {\n    let room = new_ShowRoom(_name, _position, _dateStart, _dateEnd, _imgWeightSize);\n    user.user_NFTComing = room;\n  }\n\n  function addNowArr(_name, _position, _dateStart, _dateEnd, _imgWeightSize) {\n    let room = new_ShowRoom(_name, _position, _dateStart, _dateEnd, _imgWeightSize);\n    user.user_NFTNow = room;\n  }\n\n  function addEndArr(_name, _position, _dateStart, _dateEnd, _imgWeightSize) {\n    let room = new_ShowRoom(_name, _position, _dateStart, _dateEnd, _imgWeightSize);\n    user.user_NFTEnd = room;\n    user.user_ShowRoomEndArr.push(room)\n  }\n\n  function removeComing() {\n    user.user_NFTComing = null;\n  }\n\n  function removeNow() {\n    user.user_NFTNow = null;\n  }\n\n  function removeEnd() {\n    user.user_NFTEnd = null;\n  }\n\n  function removeEndArr() {\n    user.user_ShowRoomEndArr = null;\n  }\n\n  function removeAll() {\n    user.user_NFTComing = null;\n    user.user_NFTNow = null;\n    user.user_NFTEnd = null;\n    user.user_ShowRoomEndArr = null;\n  }\n\n  function AddShowRoom() {\n  //\n  addComingArr('제주', JE_Position, \"2022.11.20\", \"2030.05.20\", 120);\n  addNowArr('여수', YO_Position, \"2023.11.21\", \"2031.11.20\", 140);\n  addEndArr('강릉1', GA_Position, \"2021.11.22\", \"2031.11.20\", 140);\n  addEndArr('강릉2', GA_Position, \"2022.11.22\", \"2032.11.20\", 140);\n  addEndArr('강릉13', GA_Position, \"2022.11.22\", \"2032.11.20\", 140);\n  addEndArr('강릉112', GA_Position, \"2022.11.22\", \"2032.11.20\", 140);\n  addEndArr('강릉23', GA_Position, \"2022.11.22\", \"2032.11.20\", 140);\n  addEndArr('강릉24', GA_Position, \"2022.11.22\", \"2032.11.20\", 140);\n  addEndArr('강릉25', GA_Position, \"2022.11.22\", \"2032.11.20\", 140);\n  addEndArr('강릉26', GA_Position, \"2022.11.22\", \"2032.11.20\", 140);\n\n\n  //\n  }\n\n\n\n  return (\n    <>\n\n\n    <ThemeProvider theme={theme}>\n      <BrowserRouter basename={process.env.PUBLIC_URL}>\n        <Routes>\n          <Route path=\"/main\" element={<Navigate replace to=\"/main\" MainScreen user={user} setUser={setUser} />} />\n          <Route path=\"/\" element={<Navigate replace to=\"/main\" />} />\n          <Route path=\"/mypage\" element={<Navigate replace to=\"/mypage\" MypageScreen user={user} setUser={setUser} />} />\n          <Route path=\"/renderer\" element={<Navigate replace to=\"/renderer\" RendererScreen user={user} setUser={setUser} AddShowRoom={AddShowRoom} />} />\n        </Routes>\n      </BrowserRouter>\n    </ThemeProvider>\n    </>\n  )\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { Web3ReactProvider } from \"@web3-react/core\";\nimport { Web3Provider } from \"@ethersproject/providers\";\n\nfunction getLibrary(provider) {\n  const library = new Web3Provider(provider);\n  library.pollingInterval = 12000;\n  return library;\n}\n\nReactDOM.render(\n  <Web3ReactProvider getLibrary={getLibrary}>\n    <App />\n  </Web3ReactProvider>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}